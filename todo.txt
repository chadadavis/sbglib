Organize this into sections ...

Matthieu: /g/russell/russell5/pichaud/work/python_modules
  How does Python do API docs?
Chad:
~/dev/*
~/lmu/prakt-*
~/scripts/*
Others: ...

What about true cross-language (and not just down-stream)
I.e. compile Perl/Java into binary libs, these can then be use again w/
  native interface, as if they were C libs
What about Perl/Python interaction
Doesn't Java already have Python bindings?
Read up on all this, get demos

Also create another aconvert (with cmd line interface) according to:
/g/russell1/apps/stamp_5.0/perl/aconvert
Is this the same as 
/g/russell1/apps/stamp_5.0/perl/Palign.pm ?

Cleanup Utils.pm
  Rename it/break into different files based on provided functionality
    get contributions from Evangelia/Rob/Eduardo
  Rename the functions
  Document with POD (using Pdoc/Bioperl style)
  Don't duplicate things already in PDL (check!)

Also include templates for each lang, simply to provide example of documentation formats

First worry about getting everything into SVN
Then start documenting
Then start making interfaces uniform and abstract out common features

It'll also kind be nice to have a forum/group(google)/message board where people can discuss what they're looking for and whether someone knows where to find / also what each person is working on so that we don't duplicate effort.
Setup a google group and invite people. (only once project is mature, if ever)

Create a CHANGELOG for each lang, where people can announce the additions that they've made so that we don't have 5 versions of the min() function.
This is another reason for the API documentation (make it searable - Website?) so that we can quickly find what we need. Also make code text searchable - and do constant indexing - it's a small corpus, so keep it up to date, not just once per day.

Create a google cse search engine (just use mine) to index the APIs of the Bio* projects, plus boost, BALL, etc and whatever else is standard/popular and link to it , so that people look there before rewriting something

Create standard installations for BioPerl/python/java/boost/mpi/etc and have these also get setup in the environment.sh script
Call it "The EMBL Software Development Environment"


Put a README in each lang directory documentation any dependencies:
e.g. c depends on boost/stl
Perl depends on BioPerl ...
System dependencies
Compiler dependencies (gcc 4.2 for OpenMP, e.g.), make, ...

Keep README short. Should just show how to use it, with an example?
Include rational documentation elsewhere:

Rationale:
Organizational goal: write libs in c++. Provide JNI, etc interfaces for others
Except where infrastructure already present, i.e. in the Bio* projects
Emphasize: this is just for standard tools: all public domain stuff
Emphasize: for everyone: so document ...
More in rationale: 
  For things that are only for you, you can make use of the libraries and add your own changes and modifications and simply don't check them into subversion.
Subversion etiquette: use log messages (link subversion manual)
Also advise against including very temporary/very personal code in SVN: 
Set the svn:ignore tag to ignore all by default to avoid random check ins.
Document how to 'svn add' things that are ready for public (EMBL) consumption.

how to set LD_LIBRARY_PATH? Where are the compiled libs (for all langs) going?
A root dir ./libs or just put it in ./c or in ./c++ ?
# Libs could potentially also be compiled by other langs (non-C), right?
# So, maybe we need a top level ./libs dir

Double check that the environment paths work correctly for locating libs
Need an example/demo (but a real-life useful one) for each lang

Should also include some helper tools to automate cluster usage.
  Create README/examples too
Also note optional dependencies: OpenMPI / OpenMP
All low-level stuff should be thread-safe

Automate the installation/configuration of common dependencies
e.g. is there a group-wide installation of bioper somewhere?
There's an 'apps' dir. Now we need a 'libs' dir

Once all this stuff is setup, give a presentation/tutorial, sell it

The */doc directories is where the documentation get's placed, when extracted

Should c and c++ be separate?

create environment.sh to inject necessary env. vars into shell (and *.csh)
  PERL5LIB
  MANPATH (for autogenerated man pages?) (pipedream?)
  PYTHONPATH
  R_LIBS
  LD_LIBRARY_PATH
  LDFLAGS=-L/path/.../lib (but you have to add your own -lmylib when compiling)
  CLASSPATH
  CPPFLAGS=-I/path/.../include

Ideally, for each langauge, the */EMBL directory should be provided as an
independent package that is usable by the public
for each lang, document (provide short intro to, then links to details) how packages are created.

Namespace system:
Perl: EMBL and EMBL::Bio
C++: EMBL::
Java EMBL.
Python EMBL
R      EMBL


Include makefiles (for Java/C++)

Don't force e.g. java junk to be compiled to use c libs.
I.e. if a perl interface needs a c lib, the perl/Makefile should compile it.
i.e. each langauge directory should be independent of the others
The top-level Makefile should just run make in the subdirs, nothing else
The top-level should also have a 'doc' target that does 'make doc' in subdirs

Create documentation subdirectories and scripts for autogenerating it
  for each lang separately?
  Put a ./doc subdir for each lang and include a Makefile and README for each

  Including links to coding standards for BioPerl/BioPython/BioJava
    We want this stuff to get integrated, if it's good (documentation format)

create README to explain directory structure and how to use it
  including where to find remainder of documentation for given lang.
  and how to include environment.sh in your own .bashrc (and for (t)csh)

Round up standard perl libs/extensions to bioperl
e.g from ~/lmu/prakt-gobi/public_html/cgi-bin/Bio/... 
-> goes into ~/dev/perl/... and that's added to PERL5LIB (for my libs)
Good ones get sent to BioPerl (follow the API!) others should go to 
our Russell group SVN (actually all should go to group SVN, under eg 'lib')
Stop rewriting parsers!!
Integrate Rob's Palign.pm 
(does he have formats missing from Bioperl?)
Steal any needed parsing code for new formats and convert to Bioperl interface
Also integrate any part of Rob's Pblast.pm that's not arlready in Bioperlx

Setup documentation systems based on previous projects:
Javadoc, Doxygen, POD, 


