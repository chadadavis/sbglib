#!/usr/bin/env perl

use Modern::Perl;

use Moose::Autobox;
use Data::Dump qw/dump/;

use SBG::Seq;
use SBG::Node;
use SBG::Interaction;
use SBG::Network;
use SBG::Complex;

use SBG::DB::scop qw/scopdomain/;
use SBG::Search::Bench qw/pdbids components search/;
use SBG::U::List qw/pairs/;
use SBG::Role::Storable;
use SBG::U::Log qw/log/;

my $DEBUG;
# $DEBUG = 1;
log()->init('TRACE') if $DEBUG;

my @ids; 
if (@ARGV) {
    while (<>) {
        chomp;
        push @ids, $_;
    }
} else {
    @ids = pdbids();
}


foreach my $pdbid (@ids) {
    say $pdbid;
    my @files = <$pdbid*.stor>;
    unless (@files) {
        my $net = _pdb2net($pdbid);
        @files = _write_partitions($pdbid, $net);
    }
    print "\n";
}


sub _pdb2net {
    my ($pdbid) = @_;

    my $components = [ components($pdbid) ];
    my $seqs = $components->map(sub{new SBG::Seq(-accession_number=>$_)});
    my $nodes = $seqs->map(sub{new SBG::Node($_)});
    my $net = new SBG::Network;
    $net->add_node($_) for @$nodes;
    say "\tnodes ", scalar($net->nodes);
    # Use this interaction search routine to build the network's interactions
    $net->build(new SBG::Search::Bench);
    say "\tedges ", scalar($net->edges);
    say "\tinteractions ", scalar($net->interactions);
    return $net;
}


sub _write_partitions {
    my ($pdbid, $net) = @_;
    my @subnets = $net->partition;
    say "\tsubnets ", scalar(@subnets);
    my @files;
    for (my $i = 0; $i < @subnets; $i++) {
        # 1-based counting
        my $basename = sprintf "%s-%04d", $pdbid, $i+1;
        my $netfile = "$basename.stor";
        $subnets[$i]->store($netfile) unless -f $netfile;
        push @files, $netfile;
    }
    return @files;
}


 
