#!/usr/bin/env perl

use strict;
use SBG::Eval;
use SBG::DomainIO;

# Command line:
# ./mktemplates 2j57 ./search_bench_part8.out-robs

my $testpdb = shift or die;
my $templfile = "${testpdb}_templates.csv";
my $testfile = "${testpdb}_bench.dom";
my %truecomponents;
open my $fh, ">$templfile";

while (<>) {
    # NB this only gets the 1 best template for an interaction
    next unless /^Can model $testpdb (\S+) (\S+) on (\S+) (\S+)/i;
    print;
    my ($testscop1, $testscop2, $templscop1, $templscop2) = ($1, $2, $3, $4);

    $testscop1 =~ s/-/./g;
    $testscop2 =~ s/-/./g;

    my ($testdom1, $testdom2, $templdom1, $templdom2) = 
    map { mk_dom($_) } ($testscop1, $testscop2, $templscop1, $templscop2);

    my $longid1=$testdom1->pdbid . $testdom1->chainid . '.' . $testdom1->scopid;
    my $longid2=$testdom2->pdbid . $testdom2->chainid . '.' . $testdom2->scopid;
    
    print $fh 
        "$longid1\t",
        "$longid2\t",
        join(' ',
             $templdom1->pdbid, '{', $templdom1->descriptor, '}',
             $templdom2->pdbid, '{', $templdom2->descriptor, '}',
        ),
        "\n";
    # Write the 
    $truecomponents{$longid1} = $testdom1;
    $truecomponents{$longid2} = $testdom2;
}

my $io = new SBG::DomainIO(-file=>">$testfile");
foreach my $key (keys %truecomponents) {
    my $d = $truecomponents{$key};
#     $d->label($d->pdbid . $d->chainid);
#     print STDERR "key:$key:\n";
    $d->label($key);
    $io->write($d, -id=>'label');
}

print "Templates: $templfile\n";
print "Benchmark: $testfile\n";

