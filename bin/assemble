#!/usr/bin/env perl

use strict;

# Input
use SBG::NetworkIO qw(graphviz);
# Output
use SBG::Complex;
# Algorithm
use SBG::Traversal;
# Callback functions
use SBG::Assembler;


################################################################################

my $templates = shift or die;

# Min components in complex
my $minsize = shift || 3;

# A L<Bio::Network::ProteinNet> of L<SBG::Interaction> templates
my $network = new SBG::NetworkIO(-file=>$templates)->read;

# Print input graph
# graphviz($network, "templates.dot");

# Each result is a complex
my $state = new SBG::Complex;

# Traverse the network
# -test is the function to call when trying to place an interaction
# -partial is the function to call when one complex solution is complete
my $t = new SBG::Traversal(-graph=>$network, 
                           -test=>\&SBG::Assembler::try_interaction, 
                           -partial=>\&SBG::Assembler::got_solution,
                           -minsize=>$minsize,
    );

$t->traverse($state);

exit;

__END__



