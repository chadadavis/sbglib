#!/usr/bin/env perl

use strict;

use File::Basename;
use SBG::Domain;
use SBG::DomainIO;
use SBG::STAMP;
use SBG::Domain::CofM;

use PDL::Matrix;

my ($tfile, @files) = @ARGV;
die unless $tfile;
my $io = new SBG::DomainIO(-file=>$tfile);
my $dom = $io->read;
my $t = $dom->transformation;
print "$tfile:\n$t\n";

foreach my $file (@files) {
    my @doms;
    my $io = new SBG::DomainIO(-file=>$file);
    $file = file_incr($file);
    print STDERR "$file :\n";

    while (my $d = $io->read) {
        # Make sure points are defined in space first

        # Check if we are transforming a Domain or a Transform
        # It's always a Domain, but sometimes it doesn't have a PDB ID
        # In that case, need to set cofm, without resetting its transform
        # TODO this should be the same API either way. use Storable; !

#         $d = SBG::CofM::cofm($d);
        my $thing = SBG::CofM::cofm($d);

        if ($thing) {
            # Apply any saved transformation to native CofM point
            $thing->transform($thing->transformation);
        } else {
            # Must be just a transform
            $thing = $d;
            $thing->cofm(mpdl (0,0,0,1));
        }

        $thing->transform($t);

        my $label = label_incr($thing->label);
        $thing->label($label);
        print STDERR "\t$thing\n";

        push @doms, $thing;
    }
    $io->close;
    $io = new SBG::DomainIO(-file=>">$file");
    foreach my $d (@doms) {
        $io->write($d,-id=>'stampid');
    }
}

# Add a counter to file name to track number of times transformed
sub file_incr {
    my $file = shift;
    if ($file =~ /^(.*?)(\d+)?(\..*)?$/) {
        $file = $1 . ($2+1) . $3;
    }
    return $file;
}

# Add a counter to domain name to track number of times transformed
sub label_incr {
    my $label = shift;
    my $n = 0;
    if ($label =~ /^(.*?)-?t(\d+)$/) {
        $n = $2;
        $label = $1;
    }
    $n++;
    $label = ($label ? $label . '-t' : 't') . sprintf("%03d",$n);
    return $label;
}

    
__END__



