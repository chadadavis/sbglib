#!/usr/bin/env perl

=head1 NAME

B<bencheval> - Evaluate a complex against models of it

=head1 SYNOPSIS

 bencheval true-complex-file.stor model1.stor model2.stor ...

=head1 DESCRIPTION



=head1 OPTIONS

=head2 -l|log=s     log level

=head2 -f|field=s   field name to sort on

=head2 -b|best=s    Best N (or N%) (per size, if -u)

=head2 -s|size=s    minimum N (or N%) components per model

=head2 -c|complete  Only full-coverage models

=head2 -r|reverse   reverse sort

=head2 -u|unique    unique by size (diff. sizes separately)

=head2 -h Print this help page

=head2 -l|og Set logging level

In increasing order: TRACE DEBUG INFO WARN ERROR FATAL

I.e. setting B<-l WARN> (the default) will log warnings errors and fatal
messages, but no info or debug messages to the log file (B<log.log>)

=head1 SEE ALSO



=cut

################################################################################


use strict;
use warnings;
use Pod::Usage;
use Getopt::Long;
use File::Basename;
use POSIX; # qw/ceil/;

use Data::Dump qw/dump/;
use Moose::Autobox;
use autobox ARRAY => 'SBG::U::List';

use SBG::Role::Storable;
use SBG::Complex;
use SBG::DomainIO::pdb;


################################################################################


my %ops;
my $result = GetOptions(\%ops,
                        'h|help',
                        'l|log=s',   # log level
                        's|size=s',  # minimum N (or N%) components per model
                        'c|complete',# Only full-coverage models
                        'f|field=s', # field name to sort on
                        'b|best=s',  # Best N (or N%) (per size, if -u)
                        'r|reverse', # reverse sort
                        'u|unique',  # unique by size (diff. sizes separately)
    );                  

if ($ops{'h'}) { pod2usage(-exitval=>1, -verbose=>2); }
SBG::U::Log::init($ops{'l'}) if $ops{'l'};


foreach my $file (@ARGV) {

    my $base = basename($file, '.stor');
    my $pdbfile = "${base}.pdb";
    my $io = new SBG::DomainIO::pdb(file=>">$pdbfile");
    my $complex = retrieve $file;
    print $base, " ", $complex, "\n";
    $io->write(@{$complex->domains});
}

